namespace StoreBLL.Services;
using StoreBLL.Interfaces;
using StoreBLL.Models;
using StoreDAL.Data;
using StoreDAL.Entities;
using StoreDAL.Interfaces;
using StoreDAL.Repository;
using System;
using System.Collections.Generic;
using System.Linq;

/// <summary>
/// Category service: BLL mapping + CRUD.
/// </summary>
public class CategoryService : ICrud
{
    private readonly ICategoryRepository repository;

    public CategoryService(StoreDbContext context)
    {
        this.repository = new CategoryRepository(context);
    }

    public void Add(AbstractModel model)
    {
        if (model is not CategoryModel m)
            throw new ArgumentException("Expected CategoryModel", nameof(model));

        this.repository.Add(new Category(0, m.Name));
    }

    public void Delete(int modelId)
    {
        this.repository.DeleteById(modelId);
    }

    public IEnumerable<AbstractModel> GetAll()
    {
        return this.repository.GetAll().Select(c => new CategoryModel(c.Id, c.Name));
    }

    public AbstractModel GetById(int id)
    {
        var c = this.repository.GetById(id);
        return c == null ? null : new CategoryModel(c.Id, c.Name);
    }

    public void Update(AbstractModel model)
    {
        if (model is not CategoryModel m)
            throw new ArgumentException("Expected CategoryModel", nameof(model));

        var c = this.repository.GetById(m.Id);
        if (c == null) return;

        c.Name = m.Name;
        this.repository.Update(c);
    }
}
