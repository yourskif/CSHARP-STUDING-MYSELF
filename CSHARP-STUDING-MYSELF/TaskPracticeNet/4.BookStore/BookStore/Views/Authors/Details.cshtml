@model BookStore.Models.Author

@{
    ViewData["Title"] = "Деталі автора";
}

<h2>Деталі автора</h2>

<div>
    <h4>@Model.LastName @Model.FirstName</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.LastName)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.LastName)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.FirstName)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.FirstName)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.MiddleName)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.MiddleName)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.BirthDate)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.BirthDate)
        </dd>
    </dl>
</div>

<!-- Список книг -->
<h3>Книги автора</h3>
<table class="table">
    <thead>
        <tr>
            <th>Назва</th>
            <th>Жанр</th>
            <th>Кількість сторінок</th>
            <th>Дії</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var book in Model.Books)
        {
            <tr>
                <td>@book.Title</td>
                <td>@book.Genre</td>
                <td>@book.PageCount</td>
                <td>
                    <a asp-controller="Books" asp-action="Edit" asp-route-id="@book.Id" class="btn btn-warning btn-sm">Редагувати</a>
                    <a asp-controller="Books" asp-action="Details" asp-route-id="@book.Id" class="btn btn-info btn-sm">Деталі</a>
                    <a asp-controller="Books" asp-action="Delete" asp-route-id="@book.Id" class="btn btn-danger btn-sm">Видалити</a>
                </td>
            </tr>
        }
    </tbody>
</table>

<!-- Кнопки управління -->
<div>
    <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-warning">Редагувати автора</a>
    <a asp-action="Delete" asp-route-id="@Model.Id" class="btn btn-danger">Видалити автора</a>
    <a asp-action="Index" class="btn btn-secondary">Повернутись до списку</a>
    <button type="button" id="addBookButton" class="btn btn-success">Додати книгу</button>
    <button type="button" id="saveAllButton" class="btn btn-primary">Зберегти разом</button>
</div>

<!-- Модальне вікно для додавання книги -->
<div id="addBookModal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h3>Додати книгу</h3>
        <form id="addBookForm">
            <div class="form-group">
                <label for="title">Назва</label>
                <input type="text" id="title" name="title" class="form-control" required />
            </div>
            <div class="form-group">
                <label for="genre">Жанр</label>
                <select id="genre" name="genre" class="form-control" required>
                    @foreach (var genre in Enum.GetValues(typeof(BookStore.Models.GenreEnum)))
                    {
                        <option value="@genre">@genre</option>
                    }
                </select>
            </div>
            <div class="form-group">
                <label for="pageCount">Кількість сторінок</label>
                <input type="number" id="pageCount" name="pageCount" class="form-control" required />
            </div>
            <button type="button" id="saveBookButton" class="btn btn-primary">Додати</button>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        // Логіка для модального вікна
        const modal = document.getElementById("addBookModal");
        const addBookButton = document.getElementById("addBookButton");
        const closeButton = document.querySelector(".close");
        const saveBookButton = document.getElementById("saveBookButton");
        const saveAllButton = document.getElementById("saveAllButton");

        let books = []; // Тимчасовий список книг

        addBookButton.onclick = () => modal.style.display = "block";
        closeButton.onclick = () => modal.style.display = "none";

        saveBookButton.onclick = () => {
            const title = document.getElementById("title").value;
            const genre = document.getElementById("genre").value;
            const pageCount = document.getElementById("pageCount").value;

            if (title && genre && pageCount) {
                const book = {
                    Title: title,
                    Genre: genre,
                    PageCount: pageCount,
                    AuthorId: @Model.Id
                };

                books.push(book); // Додаємо книгу до тимчасового списку
                modal.style.display = "none";
                alert("Книгу додано до списку. Натисніть 'Зберегти разом', щоб зберегти всі книги.");
            }
        };

        // Асинхронне збереження всіх книг
        saveAllButton.onclick = async () => {
            const authorId = @Model.Id;

            const response = await fetch("/Authors/SaveBooks", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "RequestVerificationToken": document.querySelector("input[name='__RequestVerificationToken']").value
                },
                body: JSON.stringify({ AuthorId: authorId, Books: books })
            });

            if (response.ok) {
                window.location.href = "/Authors/Index";
            } else {
                alert("Помилка при збереженні книг");
            }
        };
    </script>
}